trigger:
- master

pool:
  vmImage: ubuntu-latest

parameters:
- name: appName
  default: ''
- name: projectName
  default: ''
- name: scanTypeList
  type: string
  default: "SCA,SAST"
  # Allowed values: Comma-separated list containing any of: SCA,SAST,IMAGE,ALL
- name: imagesToScan
  default: ''
- name: postScanSCAReports
  default: ''

variables:
- name: MEND_URL
  value: https://app-eu.whitesourcesoftware.com
  # value: https://saas-eu.mend.io
- name: MEND_SCA_ENV
  value: https://app-eu.whitesourcesoftware.com
- name: MEND_SCA_URL
  value: https://app-eu.whitesourcesoftware.com
- name: MEND_SCA_API_URL
  value: https://api-app-eu.whitesourcesoftware.com/api/v2.0
- name: MEND_LOG_LEVEL
  value: DEBUG

steps:
  - script: echo Testing Mend CLI IN Azure!
    displayName: 'Run a one-line script'

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'

  # Install required packages including curl and PHP package manager (composer)
  - script: |
      sudo apt-get update
      sudo apt-get install -y curl php-cli unzip
      curl -sS https://getcomposer.org/installer | php
      sudo mv composer.phar /usr/local/bin/composer
    displayName: 'Install dependencies including PHP package manager'

  # Check and Install Mend CLI if not present
  - script: |
      mend -h > /dev/null 2>&1
      if [ $? -eq 127 ]; then
        echo "Downloading Mend CLI"
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
      fi
    displayName: 'Check and Install Mend CLI'

  # Run Mend CLI Scans based on parameters
  - script: |
      WS_SCAN_TYPES="${{ parameters.scanTypeList }}"

      ### Mend SCA Scan #######
      if [[ "$WS_SCAN_TYPES" == *"SCA"* || "$WS_SCAN_TYPES" == *"ALL"* ]];
      then
        echo Running Mend SCA scan
        mend dep -u -s *//${{ parameters.appName }}//${{ parameters.projectName }} --fail-policy --non-interactive --export-results dep-results.txt
        export dep_exit=$?
        if [[ "$dep_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] Dependency scan policy violation"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        else
          echo "No policy violations found in dependencies scan"
        fi
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/dep-results.txt"
      fi
      #########################

      ### Mend SAST Scan ######
      if [[ "$WS_SCAN_TYPES" == *"SAST"* || "$WS_SCAN_TYPES" == *"ALL"* ]];
      then
        echo Running Mend SAST scan
        mend code -s *//${{ parameters.appName }}//${{ parameters.projectName }} -r --formats sarif --filename code-results --non-interactive
        export code_exit=$?
        if [[ "$code_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] Code scan threshold violation"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        else
          echo "No policy violations found in code scan"
        fi
        echo "##vso[task.setvariable variable=publishLogs]Yes"
      fi
      #########################

      ### Mend IMAGE Scan ######
      if [[ "$WS_SCAN_TYPES" == *"IMAGE"* || "$WS_SCAN_TYPES" == *"ALL"* ]];
      then
        echo Running Mend Image scan
        echo "Showing images that will be scanned"
        cat ${{ parameters.imagesToScan }}
        file="${{ parameters.imagesToScan }}"
        while IFS= read -r line
        do
          slashline=$(echo "$line" | sed 's/\//-/g')
          escline=$(echo "$slashline" | sed 's/:/_/')
          echo "Scanning the image named $line with friendly name of $escline"
          mend image $line -s *//${{ parameters.appName }}//${{ parameters.projectName }} --filter critical --fail-policy > $escline-results.txt
          image_exit=$?
          if [[ "$image_exit" == "9" ]]; then
            echo "##vso[task.logissue type=warning;] Image scan policy violation in $escline"
            echo "##vso[task.complete result=SucceededWithIssues;]"
          else
            echo "No policy violations found in $line scan"
          fi
          cat $escline-results.txt
          echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/${escline}-results.txt"
        done < "$file"
      fi
      #########################

      ### Moving Mend logs ###
      mv ~/.mend/logs $(System.DefaultWorkingDirectory)
      mv *results* $(System.DefaultWorkingDirectory)/logs/
      #########################
    env:
      MEND_SCA_URL: $(MEND_SCA_URL)
      MEND_SCA_EMAIL: $(MEND_SCA_EMAIL_SECRET)
      MEND_SCA_USER_KEY: $(MEND_SCA_USER_KEY_SECRET)
      MEND_SCA_ORG_UUID: $(MEND_SCA_ORG_UUID_SECRET)
      MEND_SCA_API_URL: $(MEND_SCA_API_URL)
      MEND_LOG_LEVEL: $(MEND_LOG_LEVEL)
    displayName: 'Mend CLI Scan'

